#	This file is part of the Snoopy code.
#
#    Snoopy code is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    Snoopy code is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with the Snoopy code.  If not, see <http://www.gnu.org/licenses/>.

# Example of a Snoopy configuration file

configname = "Heat diffusion test problem gaussian (with supertimestepping)";

modules:						// Spooky modules (replaces physics_modules.hpp)
{
	debug = 1;   				// debug levels = 0 (no debug), 1 (less verbose), 2 (very verbose)
	incompressible = false;		// HD module
	heat_equation = true;		// heat_equation module (incompatible with incompressible)
	boussinesq = false; 		// add boussinesq module (only with incompressible)
	stratification = false;		// when boussinesq = true, if background stratification
	strat_direction = 2;		// with boussinesq and stratification, direction of strat (0=x, 1=y, 2=z)
	mhd = false;				// magnetic fields
	anisotropic_diffusion = false; // anisotropic diffusion of heat along magnetic fields
	supertimestepping = true; // supertimestepping of parabolic terms
	sts_algorithm = "rkl3"; // supertimestepping algorithm. Valid choices: "sts", "rkl3"
	sts_variables = ("th"); // variables on which the supertimestepping is applied.


};

physics:									// Physics parameters
{
	boxsize = (4.0, 1.0, 1.0);				// Box length in X, Y and Z
	gridsize = (512, 2, 2);				// Grid size in X, Y, and Z
	reynolds = 200.0;							// Reynolds number (actually the inverse of the viscosity)
	reynolds_thermic = 1.0;					// Thermal Reynolds number (actually the inverse of the thermal diffusivity).  Used only when Boussinesq is on
	reynolds_magnetic = 10000.0;				// Magnetic Reynolds number (actually the inverse of the resistivity).  Used only when MHD is on
	//reynolds_Braginskii = 1000.0;
    //reynolds_anisotropic = 100.0;
	brunt_vaissala_squared = 1.0;			// Brunt Vaissala frequency squared. Used only when Boussinesq is on
	mti_frequency_squared = 1.0;     // MTI frequency squared. Used only when Boussinesq is on
};

//-------------------------------------------------------------------------------------------------------------------------

code:										// code parameters
{
	cfl = 1.5;								// CFL safety factor. Should be smaller than sqrt(3) for RK3 to be stable.
    cfl_par = 0.5;
    safety_sts = 1;
	safety_source = 0.2;					// Safety factor for SHEAR, Coriolis and Boussinesq terms (should be ~0.2 for accuracy)

	t_initial = 0.0;						// Initial time of the simulation
	t_final = 0.50;							// Simulation will stop if it reaches this time
	max_walltime_elapsed = 1e30;					// Maximum elapsed time (in hours). Will stop after this elapsed time if t_final is not reached.

	interface_check = 20;					// Number of loops between two checks for a user input. On slow filesystems, increase this number
	interface_output_file = false;			// Set to true to force interface outputs to a file instead of displaying them */

	force_symmetries = true;				// Uncomment to enforce spectral symmetries and mean flow to zero. Useful when N^2 or kappa^2 < 0. (see enforce_symm() )
	symmetries_step = 20;					// Number of loops between which the symmetries are enforced. Should be around ~20 for Boussinesq convection.

	antialiasing = false;					// 2/3 Antialisaing rule. Could be removed if you assume is unimportant (untested feature).

	restart = false;						// set to true to restart from a dump file. If no dump file is found, this option has no effect.
};

//-------------------------------------------------------------------------------------------------------------------------

output:										// output parameters
{
	timevar_step = 0.1;						// Time between two outputs in the timevar file
	snapshot_step = 0.1;					// Time between two snapshot outputs
	dump_step = 0.1;						// Time between two restart dump outputs (restart dump are erased)
        
	timevar_vars = ( "t","et","dissgradT");
    output_dir = "/home/lorenzolmp/Documents/AIP-postdoc/cuda-code/spooky-cmake/tests/heat-diffusion-sts/";
	vorticity = true;
};

//-------------------------------------------------------------------------------------------------------------------------

init:										// Initial conditions parameters
{
        spatial_structure = true;
	 
	white_noise:							// Init a random noise at all scales
	{
		enable = true;						// set this to true to enable white noise
		amplitude = 0.0001;					// noise amplitude
	};
	mean_field:								// Force the mean magnetic field to a given value.
	{
		enable = false;						// Set this to true to enable mean field
		bx0 = 0.00001;							// Mean magnetic field in the x direction
		by0 = 0.0;							// Mean magnetic field in the y direction
		bz0 = 0.0;							// Mean magnetic field in the z direction
	};
};
